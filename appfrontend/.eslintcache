[{"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/index.tsx":"1","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/combineReducers.ts":"2","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/App.tsx":"3","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/database.ts":"4","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/NavigationBar.ts":"5","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/userID.ts":"6","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/sortType.ts":"7","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/filterDueDate.ts":"8","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/userName.ts":"9","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/filterTag.ts":"10","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/HomePage.tsx":"11","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/WelcomePage.tsx":"12","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/NewItem.tsx":"13","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Authentication/AuthenticatedRoutes.tsx":"14","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Authentication/NonAuthenticatedRoutes.tsx":"15","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Authentication/Login.tsx":"16","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Authentication/NotFoundPage.tsx":"17","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/api/API_LINK.ts":"18","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/api/API_CRUD.ts":"19","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/api/API_AUTHEN.ts":"20","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/ToDoList.tsx":"21","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/FilterBar.tsx":"22","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/WelcomePageWord.tsx":"23","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/LoadSpinner.tsx":"24","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/NavigationBar.tsx":"25","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/ToDoCard.tsx":"26","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/ToDoCardContent.tsx":"27","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Testing.tsx":"28","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/typings.ts":"29"},{"size":336,"mtime":1610954427741,"results":"30","hashOfConfig":"31"},{"size":811,"mtime":1610919659460,"results":"32","hashOfConfig":"31"},{"size":1615,"mtime":1610999815130,"results":"33","hashOfConfig":"31"},{"size":321,"mtime":1610918068420,"results":"34","hashOfConfig":"31"},{"size":559,"mtime":1610918057290,"results":"35","hashOfConfig":"31"},{"size":474,"mtime":1610918050703,"results":"36","hashOfConfig":"31"},{"size":554,"mtime":1610918054161,"results":"37","hashOfConfig":"31"},{"size":510,"mtime":1610960096830,"results":"38","hashOfConfig":"31"},{"size":478,"mtime":1610918043919,"results":"39","hashOfConfig":"31"},{"size":364,"mtime":1610918060599,"results":"40","hashOfConfig":"31"},{"size":483,"mtime":1611227484520,"results":"41","hashOfConfig":"31"},{"size":1805,"mtime":1610916738205,"results":"42","hashOfConfig":"31"},{"size":6973,"mtime":1611002051070,"results":"43","hashOfConfig":"31"},{"size":1487,"mtime":1611227745890,"results":"44","hashOfConfig":"31"},{"size":1053,"mtime":1611227745270,"results":"45","hashOfConfig":"31"},{"size":4832,"mtime":1611001140030,"results":"46","hashOfConfig":"31"},{"size":724,"mtime":1610961329350,"results":"47","hashOfConfig":"31"},{"size":520,"mtime":1610888831804,"results":"48","hashOfConfig":"31"},{"size":3400,"mtime":1611001101130,"results":"49","hashOfConfig":"31"},{"size":3049,"mtime":1610995921830,"results":"50","hashOfConfig":"31"},{"size":3796,"mtime":1611002034220,"results":"51","hashOfConfig":"31"},{"size":4212,"mtime":1611002082790,"results":"52","hashOfConfig":"31"},{"size":527,"mtime":1610916784037,"results":"53","hashOfConfig":"31"},{"size":328,"mtime":1610993962950,"results":"54","hashOfConfig":"31"},{"size":2316,"mtime":1610954782460,"results":"55","hashOfConfig":"31"},{"size":1451,"mtime":1611001860760,"results":"56","hashOfConfig":"31"},{"size":1290,"mtime":1611001875070,"results":"57","hashOfConfig":"31"},{"size":796,"mtime":1611002047980,"results":"58","hashOfConfig":"31"},{"size":1864,"mtime":1611007671140,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1b0xvje",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/index.tsx",[],["123","124"],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/combineReducers.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/App.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/database.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/NavigationBar.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/userID.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/sortType.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/filterDueDate.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/userName.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/filterTag.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/HomePage.tsx",["125","126"],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/WelcomePage.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/NewItem.tsx",["127","128"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Dropdown } from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\nimport { API_LINK_ITEMS_POSTFIX } from \"../api/API_LINK\";\r\nimport \"./CSS/NewItem.css\";\r\nimport { markCompletion, deleteEntry, onFormEdit, onFormSubmit } from \"../api/API_CRUD\";\r\nimport { useHistory, RouteComponentProps } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport Datetime from \"react-datetime\";\r\nimport moment, { Moment } from \"moment\";\r\nimport LoadSpinner from \"./LoadSpinner\";\r\nimport { RootState } from \"../redux/combineReducers\";\r\nimport { tagOptionsObjectInterface, itemForSubmission, MatchProps } from \"../typings\";\r\n\r\n// Match's params contain either {}(/create) or an id(/completed/:id or /incomplete/:id).\r\nconst NewItem = ({ match }: MatchProps) => {\r\n  // Title and body can be converted 1 state, but flattened so as to prevent double re-rendering.\r\n  const [titleState, setTitle] = useState<string>(\"\");\r\n  const [bodyState, setBody] = useState<string>(\"\");\r\n  const userID = useSelector((state: RootState) => state.IDState);\r\n\r\n  // The tagInputBar requires 2 states to work.\r\n  const [tagState, setTags] = useState<tagOptionsObjectInterface[]>([]);\r\n  const [currentTag, setCurrentTag] = useState<string[]>([]);\r\n\r\n  // Spinner state\r\n  const loadingtext = \"Fetching your information..\";\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  // Determines the rendering of the page\r\n  const history = useHistory();\r\n  const isNewItem = useCallback(() => match.path === \"/create\", [match]);\r\n  const isCompleted = useCallback(() => match.path === \"/completed/:id\", [match]);\r\n\r\n  // Calendar-related var\r\n  var inputProps = { placeholder: \"Due date\" };\r\n  const [calendarDate, setCalendarDate] = useState<string>(\"\"); // \"\" when empty, Date type otherwise\r\n  var yesterday = moment().subtract(1, \"day\"); // This function and below is all given by react-datetime.\r\n  var valid = (current: Moment) => {\r\n    return current.isAfter(yesterday);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fills up the form for put request.\r\n    const refreshArticle = async () => {\r\n      if (!isNewItem()) {\r\n        const itemDetails = await axios.get(`${API_LINK_ITEMS_POSTFIX}/${match?.params?.id}`);\r\n        setTitle(itemDetails.data.data.title);\r\n        setBody(itemDetails.data.data.body);\r\n        // Parse the tags, and set them to the tagState\r\n        setTags(\r\n          itemDetails.data.data.tag_list.map((tag: string) => {\r\n            const newObj: tagOptionsObjectInterface = { key: tag, text: tag, value: tag };\r\n            return newObj;\r\n          })\r\n        );\r\n        if (itemDetails.data.data.due_date) {\r\n          // If there is a due date specified\r\n          console.log(itemDetails.data.data.due_date);\r\n          // setCalendarDate(new Date(itemDetails.data.data.due_date));\r\n\r\n          setCalendarDate(itemDetails.data.data.due_date);\r\n        } else {\r\n          // No due date specified, just leave the date to default \"\", which would become null below via ternary.\r\n        }\r\n        setCurrentTag(itemDetails.data.data.tag_list);\r\n        setLoading(false);\r\n      } else {\r\n        // Resets state, if user changes from edit to create via navBar.\r\n        setTitle(\"\");\r\n        setBody(\"\");\r\n        setTags([]);\r\n        setCalendarDate(\"\");\r\n        //setCalendarDate(\"\");\r\n      }\r\n    };\r\n    refreshArticle();\r\n  }, [match.path]);\r\n\r\n  // Conditional rendering of the buttons\r\n  const submitEditButton = <button type=\"submit\">{isNewItem() ? \"Submit\" : \"Edit\"}</button>;\r\n\r\n  const deleteButton = isNewItem() ? (\r\n    <></>\r\n  ) : (\r\n    <button onClick={() => deleteEntry(match?.params?.id)}> {\"Delete\"} </button>\r\n  );\r\n\r\n  const completeIncompleteButton = isNewItem() ? ( // Double ternary\r\n    <></>\r\n  ) : isCompleted() ? (\r\n    <button onClick={() => markCompletion(match?.params?.id, true)}>{\"Mark as Incomplete\"}</button>\r\n  ) : (\r\n    <button onClick={() => markCompletion(match?.params?.id, false)}>{\"Mark as Complete\"}</button>\r\n  );\r\n\r\n  // If is a new item, render immediately\r\n  // If is an existing item, must wait to load, then return.\r\n  return !isNewItem() && loading ? (\r\n    <LoadSpinner text={loadingtext} />\r\n  ) : (\r\n    <div className=\"NewItemBody\">\r\n      <form\r\n        className=\"NewItemform\"\r\n        onSubmit={(event) => {\r\n          const item: itemForSubmission = {\r\n            user_id: userID,\r\n            title: titleState,\r\n            body: bodyState,\r\n            tag_list: currentTag.toString(),\r\n            due_date: calendarDate,\r\n          };\r\n          isNewItem()\r\n            ? onFormSubmit(event, item, match, history)\r\n            : onFormEdit(event, match?.params?.id, item, match, history);\r\n        }}\r\n      >\r\n        <h1> {isNewItem() ? \"Create new item!\" : \"Edit item!\"} </h1>\r\n        <label>\r\n          Title:\r\n          <input\r\n            value={titleState}\r\n            onInput={(e) => setTitle((e.target as HTMLInputElement).value)}\r\n            required\r\n            minLength={3}\r\n            maxLength={27}\r\n            placeholder=\"Item Title, e.g Go fishing at 6pm\"\r\n          />\r\n        </label>\r\n        <label>\r\n          Body:\r\n          <textarea\r\n            value={bodyState}\r\n            onInput={(e) => setBody((e.target as HTMLInputElement).value)}\r\n            required\r\n            minLength={5}\r\n            maxLength={300}\r\n            placeholder=\"Item Body, e.g Remember to book tickets to Hawaii\"\r\n          />\r\n        </label>\r\n        <Datetime\r\n          dateFormat=\"YYYY-MM-DD\"\r\n          timeFormat={false}\r\n          onChange={(event: any) => {\r\n            // Force cast\r\n            setCalendarDate(event._d);\r\n          }}\r\n          closeOnSelect\r\n          isValidDate={valid}\r\n          inputProps={inputProps}\r\n          // If the calendarDate or isNewItem is empty, then it should be displayed as null\r\n          // apparently calendarDate by itself as \"\" does not evaluate to \"\" here.\r\n          value={isNewItem() || calendarDate === \"\" ? undefined : new Date(calendarDate)} // Is undefined because Datetime.d.ts said so.\r\n        />\r\n        <Dropdown\r\n          options={tagState}\r\n          placeholder=\"Tags!\"\r\n          multiple\r\n          search\r\n          selection\r\n          fluid\r\n          allowAdditions\r\n          value={currentTag}\r\n          onAddItem={(event, { value }) => {\r\n            setTags((prevState): tagOptionsObjectInterface[] => [\r\n              { text: value as string, value: value as string, key: value as string }, // Force cast\r\n              ...prevState,\r\n            ]);\r\n          }}\r\n          onChange={(event, { value }) => {\r\n            setCurrentTag(value as string[]); // Force cast\r\n          }}\r\n        />\r\n        {submitEditButton}\r\n        {deleteButton}\r\n        {completeIncompleteButton}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewItem;\r\n","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Authentication/AuthenticatedRoutes.tsx",["129"],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Authentication/NonAuthenticatedRoutes.tsx",["130"],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Authentication/Login.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Authentication/NotFoundPage.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/api/API_LINK.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/api/API_CRUD.ts",["131"],"import { API_LINK_ITEMS_POSTFIX, API_LINK_USERSHOW_POSTFIX } from \"./API_LINK\";\r\nimport axios from \"axios\";\r\nimport { change_db } from \"../redux/database\";\r\nimport { store } from \"../redux/combineReducers\";\r\nimport { History, LocationState } from \"history\";\r\nimport { itemForSubmission, completeItem, MatchProps, ExistingItem } from \"../typings\";\r\nimport { FormEvent } from \"react\";\r\n\r\n// Get completed or incompleted\r\nconst getDatabase = (isCompleted: boolean) => {\r\n  axios\r\n    .get(API_LINK_USERSHOW_POSTFIX, { withCredentials: true })\r\n    .then((resp) =>\r\n      store.dispatch(change_db(resp.data.data.filter((item: completeItem) => item.completed === isCompleted)))\r\n    )\r\n    .catch((errors) => console.log(errors));\r\n};\r\n\r\n// There's no way for id to be undefined due to checks, but typescript wont stop prompting.\r\nconst markCompletion = async (id: string | undefined, isCompleted: boolean) => {\r\n  // Put request to mark complete\r\n  await axios\r\n    .put(`${API_LINK_ITEMS_POSTFIX}/${id}`, {\r\n      completed: !isCompleted,\r\n    })\r\n    .then((resp) => {\r\n      console.log(resp);\r\n    })\r\n    .catch((resp) => console.log(resp));\r\n  getDatabase(isCompleted);\r\n};\r\n\r\nconst redirect = (match: MatchProps[\"match\"], history: History<LocationState>) => {\r\n  // Redirect once CRUD operaton is done.\r\n  const isCompleted = match.path === \"/completed/:id\";\r\n  if (isCompleted) {\r\n    // Complete will route back to complete\r\n    history.push(\"/completed\");\r\n  } else {\r\n    // Create and Incomplete should route back to incomplete\r\n    history.push(\"/incomplete\");\r\n  }\r\n};\r\n\r\n// There's no way for id to be undefined due to checks, but typescript wont stop prompting.\r\nconst deleteEntry = async (id: string | undefined) => {\r\n  // Destroy\r\n  await axios.delete(`${API_LINK_ITEMS_POSTFIX}/${id}`);\r\n};\r\n\r\n// Completed defaulted to be false\r\nconst onFormSubmit = async (\r\n  event: FormEvent<HTMLFormElement>,\r\n  item: itemForSubmission,\r\n  match: MatchProps[\"match\"],\r\n  history: History<LocationState>\r\n) => {\r\n  event.preventDefault();\r\n  const due_date = item.due_date ? item.due_date.toString() : null;\r\n  await axios\r\n    .post(API_LINK_ITEMS_POSTFIX, {\r\n      user_id: item.user_id,\r\n      title: item.title,\r\n      body: item.body,\r\n      due_date,\r\n      tag_list: item.tag_list,\r\n    })\r\n    .then((resp) => {\r\n      console.log(resp);\r\n    })\r\n    .catch((resp) => console.log(resp));\r\n  redirect(match, history);\r\n};\r\n\r\nconst onFormEdit = async (\r\n  event: FormEvent<HTMLFormElement>,\r\n  objectid: string | undefined, // There's no way for id to be undefined due to checks, but typescript wont stop prompting.\r\n  item: itemForSubmission,\r\n  match: MatchProps[\"match\"],\r\n  history: History<LocationState>\r\n) => {\r\n  event.preventDefault();\r\n  const due_date = item.due_date ? item.due_date.toString() : null;\r\n  await axios\r\n    .put(`${API_LINK_ITEMS_POSTFIX}/${objectid}`, {\r\n      // ES15 syntax\r\n      user_id: item.user_id,\r\n      title: item.title,\r\n      body: item.body,\r\n      due_date,\r\n      tag_list: item.tag_list,\r\n    })\r\n    .then((resp) => {\r\n      console.log(resp);\r\n    })\r\n    .catch((error) => {\r\n      if (error.response) {\r\n        console.log(\"Data\", error.response.data);\r\n      } else {\r\n        console.log(\"Error\", error);\r\n      }\r\n    });\r\n  redirect(match, history);\r\n};\r\n\r\nexport { getDatabase, markCompletion, deleteEntry, onFormEdit, onFormSubmit };\r\n","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/api/API_AUTHEN.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/ToDoList.tsx",["132","133"],"import React, { useState, useCallback, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { XMasonry, XBlock } from \"react-xmasonry\";\r\nimport ToDoCard from \"./ToDoCard\";\r\nimport { getDatabase } from \"../api/API_CRUD\";\r\nimport \"./CSS/ToDoList.css\";\r\nimport LoadSpinner from \"./LoadSpinner\";\r\nimport { change_db } from \"../redux/database\";\r\nimport { RootState, store } from \"../redux/combineReducers\";\r\nimport { completeItem, EmptyMatchProps } from \"../typings\";\r\n\r\nconst ToDoList = ({ match }: EmptyMatchProps) => {\r\n  const activated = useSelector((state: RootState) => state.navigationState);\r\n  const currentDatabase = useSelector((state: RootState) => state.databaseState);\r\n  const currentTag = useSelector((state: RootState) => state.tagState);\r\n  const isSortingByUpdateDate = useSelector((state: RootState) => state.sortState);\r\n  const filterDueDateDaysBy = useSelector((state: RootState) => state.dueDateState);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    store.dispatch(change_db([]));\r\n    setLoading(true);\r\n    const databaseFn = async () => {\r\n      await getDatabase(match.path !== \"/incomplete\");\r\n      setLoading(false);\r\n    };\r\n    databaseFn();\r\n  }, [activated]);\r\n\r\n  const filterBasedOnTag = (jsonObject: completeItem) => {\r\n    // If currentTag is not empty, then we will filter based on currentTag\r\n    if (currentTag.length > 0) {\r\n      if (jsonObject.tag_list.filter((e) => currentTag.indexOf(e) !== -1).length > 0) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      // If currentTag is empty, then no filter is applied\r\n      return true;\r\n    }\r\n  };\r\n  const _MS_PER_DAY = 1000 * 60 * 60 * 24;\r\n  const filterBasedOnDueDate = (jsonObject: completeItem) => {\r\n    if (!filterDueDateDaysBy) {\r\n      return true;\r\n    } else {\r\n      if (jsonObject.due_date) {\r\n        const todayOffsetByFilter: Date = new Date();\r\n        todayOffsetByFilter.setDate(todayOffsetByFilter.getDate() + filterDueDateDaysBy); // Add days to date\r\n        const dateObj: Date = new Date(jsonObject.due_date);\r\n        return (todayOffsetByFilter.getTime() - dateObj.getTime()) / _MS_PER_DAY >= 0;\r\n      }\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Comparators\r\n  const sortBasedOnUpdate = (a: completeItem, b: completeItem) => {\r\n    return new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime();\r\n  };\r\n  const sortBasedOnDueDate = (a: completeItem, b: completeItem) => {\r\n    if (a.due_date === b.due_date) {\r\n      return 0;\r\n    } else if (a.due_date === null) {\r\n      return 1;\r\n    } else if (b.due_date === null) {\r\n      return -1;\r\n    } else {\r\n      return new Date(a.due_date).getTime() - new Date(b.due_date).getTime();\r\n    }\r\n  };\r\n  // This has very high complexity, may bottleneck here.\r\n  const renderDatabase = currentDatabase\r\n    .filter((x: completeItem) => filterBasedOnTag(x))\r\n    .filter((x: completeItem) => filterBasedOnDueDate(x))\r\n    .sort((a: completeItem, b: completeItem) =>\r\n      isSortingByUpdateDate ? sortBasedOnUpdate(a, b) : sortBasedOnDueDate(a, b)\r\n    )\r\n    .map((jsonObject: completeItem) => {\r\n      return (\r\n        <XBlock key={jsonObject.id}>\r\n          <div className=\"XMasonryCard\">\r\n            <ToDoCard item={jsonObject} />\r\n          </div>\r\n        </XBlock>\r\n      );\r\n    });\r\n\r\n  // If renderDatabase is loading, we'll need buffer some things first right\r\n  const displayDatabase = useCallback(() => {\r\n    return (\r\n      //\r\n      //<XMasonry style={{ marginTop: \"5vh\" }} maxColumns={4}>\r\n      <XMasonry maxColumns={4}>{renderDatabase}</XMasonry>\r\n    );\r\n  }, [currentTag, renderDatabase]);\r\n\r\n  return loading ? <LoadSpinner text=\"Loading data..\" /> : displayDatabase();\r\n};\r\n\r\nexport default ToDoList;\r\n","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/FilterBar.tsx",["134","135","136"],"import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addTag } from \"../redux/filterTag\";\r\nimport { Dropdown, Container, Grid } from \"semantic-ui-react\";\r\nimport { sortByUpdateDate, sortByDueDate } from \"../redux/sortType\";\r\nimport { filterDueDate, resetFilterDueDate } from \"../redux/filterDueDate\";\r\nimport { RootState } from \"../redux/combineReducers\";\r\nimport { tagOptionsObjectInterface, sortOptionObjectInterface, EmptyMatchProps, completeItem } from \"../typings\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n\r\nconst FilterBar = ({ match }: EmptyMatchProps) => {\r\n  const currentDatabase = useSelector((state: RootState) => state.databaseState);\r\n\r\n  const filterOptions = [\r\n    { key: \"one\", text: \"Filter due in a day\", value: 1 },\r\n    { key: \"three\", text: \"Filter due in 3 days\", value: 3 },\r\n    { key: \"seven\", text: \"Filter due in a week\", value: 7 },\r\n  ];\r\n  const [tagOptions, setTagOptions] = useState<tagOptionsObjectInterface[]>([]); // Tags require 2 states\r\n  const currentTag = useSelector((state: RootState) => state.tagState);\r\n\r\n  const sortOptions = [\r\n    // isSortByUpdate -> true or false?\r\n    { key: \"SORTBYDUEDATE\", text: \"Sort by due date\", value: false },\r\n    { key: \"SORTBYUPDATE\", text: \"Sort by update date\", value: true },\r\n  ];\r\n  // This state is solely for animating. I didn't want redux to take in the whole object value returned by Semantic\r\n  const [DropdownSortText, setDropdownSortText] = useState<sortOptionObjectInterface>(sortOptions[0]);\r\n\r\n  const dispatch = useDispatch();\r\n  const isCompleted = useCallback(() => match.path === \"/completed\", [match]);\r\n\r\n  useEffect(() => {\r\n    // Parse through the available tags, and display them as options\r\n    const refreshFilterBar = () => {\r\n      // Unique tagsList\r\n      const tagsList = [\r\n        ...new Set<string>(\r\n          currentDatabase\r\n            .filter(\r\n              (jsonObject: completeItem) => jsonObject.completed === isCompleted() && jsonObject.tag_list.length > 0\r\n            )\r\n            .map((jsonObject: completeItem) => jsonObject.tag_list)\r\n            .flat()\r\n        ),\r\n      ];\r\n      setTagOptions(\r\n        tagsList.map((tag) => {\r\n          const newObj: tagOptionsObjectInterface = { key: tag, text: tag, value: tag };\r\n          return newObj;\r\n        })\r\n      );\r\n    };\r\n    refreshFilterBar();\r\n  }, [currentDatabase]);\r\n\r\n  // Reset the dropdown animiations and states when changing to a new page.\r\n  useEffect(() => {\r\n    dispatch(addTag([]));\r\n    dispatch(resetFilterDueDate());\r\n    dispatch(sortByDueDate()); // Sort state\r\n    setDropdownSortText(sortOptions[0]); // Sort animation\r\n  }, [match]);\r\n\r\n  return (\r\n    <Container>\r\n      <Grid columns={3} stackable>\r\n        <Grid.Column>\r\n          <Dropdown\r\n            fluid\r\n            selection\r\n            options={sortOptions}\r\n            value={DropdownSortText.value} // Im not sure how this works.\r\n            onChange={(event, { value }) => {\r\n              setDropdownSortText({ key: value as string, value: value as boolean, text: value as string });\r\n              value ? dispatch(sortByUpdateDate()) : dispatch(sortByDueDate());\r\n            }}\r\n          />\r\n        </Grid.Column>\r\n\r\n        <Grid.Column>\r\n          <Dropdown\r\n            placeholder=\"Filter by Tags\"\r\n            clearable\r\n            fluid\r\n            multiple\r\n            selection\r\n            options={tagOptions}\r\n            value={currentTag}\r\n            onChange={(event, { value }) => {\r\n              dispatch(addTag(value));\r\n            }}\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column>\r\n          <Dropdown\r\n            placeholder=\"Filter by due date\"\r\n            fluid\r\n            selection\r\n            clearable\r\n            options={filterOptions}\r\n            onChange={(event, { value }) => {\r\n              console.log(value);\r\n              console.log(typeof value);\r\n              value ? dispatch(filterDueDate(value)) : dispatch(resetFilterDueDate());\r\n            }}\r\n          />\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FilterBar;\r\n","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/WelcomePageWord.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/LoadSpinner.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/NavigationBar.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/ToDoCard.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/ToDoCardContent.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Testing.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/typings.ts",["137","138","139"],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":5,"column":10,"nodeType":"146","messageId":"147","endLine":5,"endColumn":29},{"ruleId":"144","severity":1,"message":"148","line":7,"column":10,"nodeType":"146","messageId":"147","endLine":7,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":7,"column":22,"nodeType":"146","messageId":"147","endLine":7,"endColumn":41},{"ruleId":"149","severity":1,"message":"150","line":79,"column":6,"nodeType":"151","endLine":79,"endColumn":18,"suggestions":"152"},{"ruleId":"144","severity":1,"message":"153","line":6,"column":10,"nodeType":"146","messageId":"147","endLine":6,"endColumn":33},{"ruleId":"144","severity":1,"message":"153","line":5,"column":10,"nodeType":"146","messageId":"147","endLine":5,"endColumn":33},{"ruleId":"144","severity":1,"message":"154","line":6,"column":55,"nodeType":"146","messageId":"147","endLine":6,"endColumn":67},{"ruleId":"149","severity":1,"message":"155","line":28,"column":6,"nodeType":"151","endLine":28,"endColumn":17,"suggestions":"156"},{"ruleId":"149","severity":1,"message":"157","line":97,"column":6,"nodeType":"151","endLine":97,"endColumn":34,"suggestions":"158"},{"ruleId":"144","severity":1,"message":"145","line":9,"column":10,"nodeType":"146","messageId":"147","endLine":9,"endColumn":29},{"ruleId":"149","severity":1,"message":"159","line":55,"column":6,"nodeType":"151","endLine":55,"endColumn":23,"suggestions":"160"},{"ruleId":"149","severity":1,"message":"161","line":63,"column":6,"nodeType":"151","endLine":63,"endColumn":13,"suggestions":"162"},{"ruleId":"144","severity":1,"message":"163","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":17},{"ruleId":"144","severity":1,"message":"164","line":2,"column":19,"nodeType":"146","messageId":"147","endLine":2,"endColumn":32},{"ruleId":"144","severity":1,"message":"165","line":4,"column":10,"nodeType":"146","messageId":"147","endLine":4,"endColumn":19},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"@typescript-eslint/no-unused-vars","'RouteComponentProps' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isNewItem' and 'match?.params?.id'. Either include them or remove the dependency array.","ArrayExpression",["168"],"'AuthenticationRouteProp' is defined but never used.","'ExistingItem' is defined but never used.","React Hook useEffect has a missing dependency: 'match.path'. Either include it or remove the dependency array.",["169"],"React Hook useCallback has an unnecessary dependency: 'currentTag'. Either exclude it or remove the dependency array.",["170"],"React Hook useEffect has a missing dependency: 'isCompleted'. Either include it or remove the dependency array.",["171"],"React Hook useEffect has missing dependencies: 'dispatch' and 'sortOptions'. Either include them or remove the dependency array.",["172"],"'History' is defined but never used.","'LocationState' is defined but never used.","'FormEvent' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},"Update the dependencies array to be: [isNewItem, match?.params?.id, match.path]",{"range":"183","text":"184"},"Update the dependencies array to be: [activated, match.path]",{"range":"185","text":"186"},"Update the dependencies array to be: [renderDatabase]",{"range":"187","text":"188"},"Update the dependencies array to be: [currentDatabase, isCompleted]",{"range":"189","text":"190"},"Update the dependencies array to be: [dispatch, match, sortOptions]",{"range":"191","text":"192"},[3483,3495],"[isNewItem, match?.params?.id, match.path]",[1232,1243],"[activated, match.path]",[3651,3679],"[renderDatabase]",[2438,2455],"[currentDatabase, isCompleted]",[2734,2741],"[dispatch, match, sortOptions]"]