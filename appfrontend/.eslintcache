[{"/app/src/index.js":"1","/app/src/components/App.js":"2","/app/src/redux/combineReducers.js":"3","/app/src/components/NavigationBar.js":"4","/app/src/components/NewItem.js":"5","/app/src/components/HomePage.js":"6","/app/src/redux/database.js":"7","/app/src/redux/NavigationBar.js":"8","/app/src/redux/tagFilter.js":"9","/app/src/components/Authentication/Login.js":"10","/app/src/components/ToDoList.js":"11","/app/src/components/FilterBar.js":"12","/app/src/api/API_LINK.js":"13","/app/src/api/API_CRUD.js":"14","/app/src/components/ToDoItem.js":"15","/app/src/components/ToDoCard.js":"16"},{"size":336,"mtime":1609869024520,"results":"17","hashOfConfig":"18"},{"size":840,"mtime":1609896233210,"results":"19","hashOfConfig":"18"},{"size":382,"mtime":1609869077810,"results":"20","hashOfConfig":"18"},{"size":1541,"mtime":1609869058480,"results":"21","hashOfConfig":"18"},{"size":4092,"mtime":1609900907480,"results":"22","hashOfConfig":"18"},{"size":311,"mtime":1609890338410,"results":"23","hashOfConfig":"18"},{"size":321,"mtime":1609869079760,"results":"24","hashOfConfig":"18"},{"size":559,"mtime":1609869082930,"results":"25","hashOfConfig":"18"},{"size":541,"mtime":1609869081320,"results":"26","hashOfConfig":"18"},{"size":3743,"mtime":1609899654420,"results":"27","hashOfConfig":"18"},{"size":1875,"mtime":1609869073460,"results":"28","hashOfConfig":"18"},{"size":1714,"mtime":1609869054580,"results":"29","hashOfConfig":"18"},{"size":425,"mtime":1609890868130,"results":"30","hashOfConfig":"18"},{"size":2620,"mtime":1609900540290,"results":"31","hashOfConfig":"18"},{"size":1503,"mtime":1609869070230,"results":"32","hashOfConfig":"18"},{"size":1033,"mtime":1609869066640,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"19yot3",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"36"},"/app/src/index.js",[],["72","73"],"/app/src/components/App.js",[],"/app/src/redux/combineReducers.js",[],"/app/src/components/NavigationBar.js",[],"/app/src/components/NewItem.js",["74"],"/app/src/components/HomePage.js",[],"/app/src/redux/database.js",[],"/app/src/redux/NavigationBar.js",[],"/app/src/redux/tagFilter.js",[],"/app/src/components/Authentication/Login.js",["75","76","77","78"],"import React, { useEffect, useState, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Message } from \"semantic-ui-react\";\nimport \"../CSS/Login.css\";\nimport axios from \"axios\";\n\nconst Login = ({ match }) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [passwordConfirmation, setConfirmPassword] = useState(\"\");\n  const [visible, setVisible] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  const isLogin = () => false;\n\n  const onFormSubmitLogin = (event) => {\n    event.preventDefault();\n    console.log(\"Submitted\");\n    axios\n      .post(\n        \"http://localhost:5000/api/v1/sessions\",\n        {\n          user: {\n            email: email,\n            password: password,\n          },\n        },\n        { withCredentials: true }\n      )\n      .then((response) => {\n        if (response.data.logged_in) {\n          console.log(\"Logged in yo!\", response.data.logged_in);\n          window.history.pushState({ urlPath: \"/incompleted\" }, \"\", \"/incompleted\");\n        } else {\n          setMessage(\"Wrong email and/or password!\");\n          setVisible(true);\n          console.log(\"Not logged in \", response);\n        }\n      })\n      .catch((error) => {\n        console.log(\"login error\", error);\n      });\n  };\n\n  const onFormSubmitRegister = (event) => {\n    event.preventDefault();\n\n    if (password !== passwordConfirmation) {\n      console.log(password, passwordConfirmation);\n      setMessage(\"Passwords do not match!\");\n      setVisible(true);\n    } else {\n      console.log(\"Submitted Register\");\n      axios\n        .post(\n          \"http://localhost:5000/api/v1/registrations\",\n          {\n            user: {\n              email: email,\n              password: password,\n              password_confirmation: passwordConfirmation,\n            },\n          },\n          { withCredentials: true }\n        )\n        .then((response) => {\n          if (response.data.status === \"created\") {\n            console.log(\"Logged in yo!\");\n            window.history.pushState({ urlPath: \"/incompleted\" }, \"\", \"Send me off to incompleted pls!\");\n          }\n        })\n        .catch((error) => {\n          setMessage(\"Invalid email and/or password!\");\n          setVisible(true);\n          console.log(\"login error\", error.status);\n        });\n    }\n  };\n\n  const passwordConfirmationInput = isLogin() ? (\n    <></>\n  ) : (\n    <label>\n      Password Confirmation:\n      <input\n        type=\"password\"\n        minLength=\"5\"\n        required\n        placeholder=\"Confirm your password here\"\n        onInput={(e) => setConfirmPassword(e.target.value)}\n      />\n    </label>\n  );\n\n  const alert = visible ? (\n    <Message onDismiss={() => setVisible(false)} negative size=\"large\">\n      {message}\n    </Message>\n  ) : (\n    <> </>\n  );\n\n  return (\n    <div className=\"NewItemBody\">\n      <form onSubmit={isLogin() ? onFormSubmitLogin : onFormSubmitRegister}>\n        <h1> {isLogin() ? \"Login\" : \"Register an account!\"} </h1>\n        <label>\n          Email:\n          <input\n            onInput={(e) => setEmail(e.target.value)}\n            required\n            minLength=\"3\"\n            maxLength=\"27\"\n            placeholder=\"Enter your email here\"\n          />\n        </label>\n        <label>\n          Password:\n          <input\n            type=\"password\"\n            minLength=\"5\"\n            required\n            placeholder=\"Enter your password here\"\n            onInput={(e) => setPassword(e.target.value)}\n          />\n        </label>\n        {passwordConfirmationInput}\n        <button type=\"submit\">{isLogin() ? \"Login\" : \"Register!\"}</button>\n      </form>\n      {alert}\n    </div>\n  );\n};\n\nexport default Login;\n","/app/src/components/ToDoList.js",["79","80"],"import React, { useCallback, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { XMasonry, XBlock } from \"react-xmasonry\";\r\n\r\nimport ToDoItem from \"./ToDoItem\";\r\nimport { getDatabase } from \"../api/API_CRUD\";\r\nimport \"./CSS/ToDoList.css\";\r\n\r\nconst ToDoList = ({ match }) => {\r\n  const activated = useSelector((state) => state.navigationState);\r\n  const currentDatabase = useSelector((state) => state.databaseState);\r\n  const currentTag = useSelector((state) => state.tagState);\r\n\r\n  useEffect(() => {\r\n    getDatabase(match.path !== \"/incomplete\");\r\n  }, [activated]);\r\n\r\n  const filterBasedOnTag = (jsonObject) => {\r\n    // If currentTag is not empty, then we will filter based on currentTag\r\n    if (currentTag.length > 0) {\r\n      if (\r\n        jsonObject.tag_list.filter((e) => currentTag.indexOf(e) !== -1).length >\r\n        0\r\n      ) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      // If currentTag is empty, then no filter is applied\r\n      return true;\r\n    }\r\n  };\r\n\r\n  // This has very high complexity, may bottleneck here.\r\n  const renderDatabase = currentDatabase\r\n    .filter((x) => filterBasedOnTag(x))\r\n    .sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at))\r\n    .map((jsonObject) => {\r\n      return (\r\n        <XBlock key={jsonObject.id}>\r\n          <div className=\"XMasonryCard\">\r\n            <ToDoItem item={jsonObject} />\r\n          </div>\r\n        </XBlock>\r\n      );\r\n    });\r\n\r\n  // If renderDatabase is loading, we'll need buffer some things first right\r\n  const displayDatabase = useCallback(() => {\r\n    if (renderDatabase !== []) {\r\n      return <XMasonry maxColumns={4}>{renderDatabase}</XMasonry>;\r\n    } else {\r\n      return <div>\"LOADING...\"</div>;\r\n    }\r\n  }, [currentTag, renderDatabase]);\r\n\r\n  return displayDatabase();\r\n};\r\n\r\nexport default ToDoList;\r\n","/app/src/components/FilterBar.js",["81","82"],"import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Dropdown } from \"semantic-ui-react\";\r\nimport { addTag } from \"../redux/tagFilter\";\r\n\r\nconst FilterBar = ({ match }) => {\r\n  const currentDatabase = useSelector((state) => state.databaseState);\r\n  const [tagOptions, setTagOptions] = useState([]);\r\n  const currentTag = useSelector((state) => state.tagState);\r\n  const dispatch = useDispatch();\r\n\r\n  const isCompleted = useCallback(() => match.path === \"/completed\", [match]);\r\n\r\n  useEffect(() => {\r\n    // Parse through the available tags, and display them as options\r\n    const refreshFilterBar = () => {\r\n      // Unique tagsList\r\n      const tagsList = [\r\n        ...new Set(\r\n          currentDatabase\r\n            .filter(\r\n              (jsonObject) =>\r\n                jsonObject.completed === isCompleted() &&\r\n                jsonObject.tag_list.length > 0\r\n            )\r\n            .map((jsonObject) => jsonObject.tag_list)\r\n        ),\r\n      ];\r\n      setTagOptions(\r\n        tagsList.flat().map((tag) => {\r\n          const newObj = { key: tag, text: tag, value: tag };\r\n          return newObj;\r\n        })\r\n      );\r\n    };\r\n    refreshFilterBar();\r\n  }, [currentDatabase]);\r\n\r\n  useEffect(() => {\r\n    dispatch(addTag([])); // Reset the dropdown animation when change to a new page\r\n  }, [match]);\r\n\r\n  console.log(currentTag);\r\n  return (\r\n    <Dropdown\r\n      placeholder=\"Skills\"\r\n      fluid\r\n      multiple\r\n      selection\r\n      options={tagOptions}\r\n      value={currentTag}\r\n      onChange={(event, { value }) => {\r\n        dispatch(addTag(value));\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FilterBar;\r\n","/app/src/api/API_LINK.js",[],"/app/src/api/API_CRUD.js",["83","84"],"import React from \"react\";\r\nimport { API_LINK, API_LINK_ITEMS_POSTFIX } from \"./API_LINK\";\r\nimport axios from \"axios\";\r\nimport { change_db } from \"../redux/database\";\r\nimport { store } from \"../redux/combineReducers\";\r\n\r\n// Get completed or incompleted\r\nconst getDatabase = async (isCompleted) => {\r\n  const database = await axios.get(API_LINK_ITEMS_POSTFIX);\r\n  store.dispatch(change_db(database.data.data.filter((item) => item.completed === isCompleted)));\r\n};\r\n\r\n// I split the tags because it's much faster (hypothetically half), especially if we have alot of tags.\r\n\r\nconst markCompletion = async (id, isCompleted) => {\r\n  // Put request to mark complete\r\n  await axios\r\n    .put(`${API_LINK_ITEMS_POSTFIX}/${id}`, {\r\n      completed: !isCompleted,\r\n    })\r\n    .then((resp) => {\r\n      console.log(resp);\r\n    })\r\n    .catch((resp) => console.log(resp));\r\n  getDatabase(isCompleted);\r\n};\r\n\r\nconst redirect = (match, history) => {\r\n  // Redirect once CRUD operaton is done.\r\n  const isNewItem = match.path === \"/create\";\r\n  const isCompleted = match.path === \"/completed/:id\";\r\n  if (isCompleted) {\r\n    // Complete will route back to complete\r\n    history.push(\"/completed\");\r\n    /*     window.location.href = \"/completed\";\r\n     */\r\n  } else {\r\n    // Create and Incomplete should route back to incomplete\r\n    console.log(isNewItem, isCompleted, match.path);\r\n    history.push(\"/incomplete\");\r\n    /*     window.location.href = \"/incomplete\";\r\n     */\r\n  }\r\n};\r\n\r\nconst deleteEntry = async (id) => {\r\n  // Destroy\r\n  await axios.delete(`${API_LINK_ITEMS_POSTFIX}/${id}`);\r\n};\r\n\r\n// Completed defaulted to be false\r\nconst onFormSubmit = async (event, title, body, tag_list, match, history) => {\r\n  event.preventDefault();\r\n  await axios\r\n    .post(API_LINK_ITEMS_POSTFIX, {\r\n      title,\r\n      body,\r\n      tag_list,\r\n    })\r\n    .then((resp) => {\r\n      console.log(resp);\r\n    })\r\n    .catch((resp) => console.log(resp));\r\n  redirect(match, history);\r\n};\r\n\r\nconst onFormEdit = async (event, id, title, body, tag_list, match, history) => {\r\n  console.log(\"Edit called\");\r\n  event.preventDefault();\r\n  console.log(tag_list);\r\n  await axios\r\n    .put(`${API_LINK_ITEMS_POSTFIX}/${id}`, {\r\n      // ES15 syntax\r\n      title,\r\n      body,\r\n      tag_list,\r\n    })\r\n    .then((resp) => {\r\n      console.log(resp);\r\n    })\r\n    .catch((error) => {\r\n      if (error.response) {\r\n        console.log(\"Data\", error.response.data);\r\n      } else {\r\n        console.log(\"Error\", error);\r\n      }\r\n    });\r\n  redirect(match, history);\r\n};\r\n\r\nexport { getDatabase, markCompletion, deleteEntry, onFormEdit, onFormSubmit };\r\n","/app/src/components/ToDoItem.js",[],"/app/src/components/ToDoCard.js",["85","86","87"],"import React from \"react\";\r\nimport { Card, Label } from \"semantic-ui-react\";\r\nimport { addTag, removeTag, tagReducer } from \"../redux/tagFilter\";\r\nimport \"./CSS/ToDoCard.css\";\r\nimport { useSelector } from \"react-redux\";\r\nconst ToDoCard = ({ item }) => {\r\n  const tags = item.tag_list.map((tag) => (\r\n    <Label onClick={() => addTag(tag)} key={tag}>\r\n      {tag}\r\n    </Label>\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <Card.Content\r\n          header={item.title}\r\n          style={{ whiteSpace: \"pre-wrap\", overflowWrap: \"break-word\" }}\r\n          className=\"CardHeader\"\r\n        />\r\n        <Card.Content\r\n          meta={`Updated: ${new Date(item.updated_at)\r\n            .toString()\r\n            .substr(4, 17)} `}\r\n          className=\"CardMeta\"\r\n        />\r\n        <Card.Content\r\n          description={item.body}\r\n          style={{ whiteSpace: \"pre-wrap\", overflowWrap: \"break-word\" }}\r\n        />\r\n        <Card.Content extra> {tags} </Card.Content>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ToDoCard;\r\n",{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":46,"column":6,"nodeType":"94","endLine":46,"endColumn":18,"suggestions":"95"},{"ruleId":"96","severity":1,"message":"97","line":1,"column":17,"nodeType":"98","messageId":"99","endLine":1,"endColumn":26},{"ruleId":"96","severity":1,"message":"100","line":1,"column":38,"nodeType":"98","messageId":"99","endLine":1,"endColumn":49},{"ruleId":"96","severity":1,"message":"101","line":2,"column":10,"nodeType":"98","messageId":"99","endLine":2,"endColumn":21},{"ruleId":"96","severity":1,"message":"102","line":2,"column":23,"nodeType":"98","messageId":"99","endLine":2,"endColumn":34},{"ruleId":"92","severity":1,"message":"103","line":16,"column":6,"nodeType":"94","endLine":16,"endColumn":17,"suggestions":"104"},{"ruleId":"92","severity":1,"message":"105","line":56,"column":6,"nodeType":"94","endLine":56,"endColumn":34,"suggestions":"106"},{"ruleId":"92","severity":1,"message":"107","line":37,"column":6,"nodeType":"94","endLine":37,"endColumn":23,"suggestions":"108"},{"ruleId":"92","severity":1,"message":"109","line":41,"column":6,"nodeType":"94","endLine":41,"endColumn":13,"suggestions":"110"},{"ruleId":"96","severity":1,"message":"111","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":13},{"ruleId":"96","severity":1,"message":"112","line":2,"column":10,"nodeType":"98","messageId":"99","endLine":2,"endColumn":18},{"ruleId":"96","severity":1,"message":"113","line":3,"column":18,"nodeType":"98","messageId":"99","endLine":3,"endColumn":27},{"ruleId":"96","severity":1,"message":"114","line":3,"column":29,"nodeType":"98","messageId":"99","endLine":3,"endColumn":39},{"ruleId":"96","severity":1,"message":"102","line":5,"column":10,"nodeType":"98","messageId":"99","endLine":5,"endColumn":21},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isNewItem' and 'match.params.id'. Either include them or remove the dependency array.","ArrayExpression",["117"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'match.path'. Either include it or remove the dependency array.",["118"],"React Hook useCallback has an unnecessary dependency: 'currentTag'. Either exclude it or remove the dependency array.",["119"],"React Hook useEffect has a missing dependency: 'isCompleted'. Either include it or remove the dependency array.",["120"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["121"],"'React' is defined but never used.","'API_LINK' is defined but never used.","'removeTag' is defined but never used.","'tagReducer' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},"Update the dependencies array to be: [isNewItem, match.params.id, match.path]",{"range":"132","text":"133"},"Update the dependencies array to be: [activated, match.path]",{"range":"134","text":"135"},"Update the dependencies array to be: [renderDatabase]",{"range":"136","text":"137"},"Update the dependencies array to be: [currentDatabase, isCompleted]",{"range":"138","text":"139"},"Update the dependencies array to be: [dispatch, match]",{"range":"140","text":"141"},[1805,1817],"[isNewItem, match.params.id, match.path]",[583,594],"[activated, match.path]",[1780,1808],"[renderDatabase]",[1252,1269],"[currentDatabase, isCompleted]",[1386,1393],"[dispatch, match]"]