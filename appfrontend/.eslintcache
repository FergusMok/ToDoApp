[{"/app/src/index.js":"1","/app/src/components/App.js":"2","/app/src/redux/combineReducers.js":"3","/app/src/components/NavigationBar.js":"4","/app/src/components/NewItem.js":"5","/app/src/components/HomePage.js":"6","/app/src/redux/database.js":"7","/app/src/redux/NavigationBar.js":"8","/app/src/redux/tagFilter.js":"9","/app/src/components/ToDoList.js":"10","/app/src/api/API_LINK.js":"11","/app/src/api/API_CRUD.js":"12","/app/src/components/ToDoItem.js":"13","/app/src/components/ToDoCard.js":"14"},{"size":326,"mtime":1608639504722,"results":"15","hashOfConfig":"16"},{"size":885,"mtime":1609301064440,"results":"17","hashOfConfig":"16"},{"size":357,"mtime":1609254617841,"results":"18","hashOfConfig":"16"},{"size":1828,"mtime":1609314176862,"results":"19","hashOfConfig":"16"},{"size":4172,"mtime":1609669040330,"results":"20","hashOfConfig":"16"},{"size":449,"mtime":1609314072553,"results":"21","hashOfConfig":"16"},{"size":351,"mtime":1609301184077,"results":"22","hashOfConfig":"16"},{"size":332,"mtime":1608887098083,"results":"23","hashOfConfig":"16"},{"size":543,"mtime":1609256772177,"results":"24","hashOfConfig":"16"},{"size":1252,"mtime":1609667984060,"results":"25","hashOfConfig":"16"},{"size":163,"mtime":1609309687942,"results":"26","hashOfConfig":"16"},{"size":2329,"mtime":1609313690653,"results":"27","hashOfConfig":"16"},{"size":1377,"mtime":1609314155120,"results":"28","hashOfConfig":"16"},{"size":861,"mtime":1609314095219,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"185r51f",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},"/app/src/index.js",[],["63","64"],"/app/src/components/App.js",[],"/app/src/redux/combineReducers.js",[],"/app/src/components/NavigationBar.js",[],"/app/src/components/NewItem.js",["65"],"import React, {useState, useEffect, useCallback } from 'react'\r\nimport { Dropdown } from 'semantic-ui-react'\r\nimport axios from 'axios'\r\nimport API_LINK from \"../api/API_LINK\"\r\nimport \"./CSS/NewItem.css\"\r\nimport {markCompletion, deleteEntry, onFormEdit, onFormSubmit} from \"../api/API_CRUD\"\r\n\r\n\r\nconst NewItem = ({match}) => {\r\n\r\n    // Title and body can be converted 1 state, but flattened so as to prevent double re-rendering.     \r\n    const [titleState, setTitle] = useState(\"\")  \r\n    const [bodyState, setBody] = useState(\"\")\r\n\r\n    // The tagInputBar requires 2 states to work. \r\n    const [tagState, setTags] = useState([]);\r\n    const [currentTag, setCurrentTag] = useState([])\r\n\r\n\r\n    const isNewItem = useCallback(() => (match.path === \"/create\"), [match])\r\n    const isCompleted = useCallback(() => (match.path === \"/completed/:id\"), [match]) \r\n\r\n    useEffect( () => { // Fills up the form for put request.\r\n        const refreshArticle = async () => {\r\n            if (!isNewItem()) {\r\n                const itemDetails = await axios.get(`${API_LINK}/${match.params.id}`)\r\n                setTitle(itemDetails.data.data.title)\r\n                setBody(itemDetails.data.data.body)\r\n                // Parse the tags, and set them to the tagState\r\n                setTags( itemDetails.data.data.tag_list.map( tag => { \r\n                    const newObj = {key: tag, text: tag, value: tag} \r\n                    return newObj\r\n                }))\r\n                setCurrentTag( itemDetails.data.data.tag_list )\r\n            } else { // Resets state, if user changes from edit to create via navBar.\r\n                setTitle(\"\")\r\n                setBody(\"\")\r\n                setTags(\"\")\r\n            }\r\n        }\r\n        refreshArticle()}, [match.path])\r\n\r\n    \r\n    // Conditional rendering of the buttons\r\n    const submitEditButton = <button type=\"submit\">{isNewItem() ? 'Submit': \"Edit\"}</button>\r\n    const deleteButton = isNewItem() ? <></> : <button onClick = {() => deleteEntry(match.params.id, match)}> {\"Delete\"} </button>\r\n    // Double ternary\r\n    const completeIncompleteButton = isNewItem() ? <></> : \r\n        (isCompleted()) ?\r\n        <button onClick = {() => markCompletion(match.params.id, true)}>{\"Mark as Incomplete\"}</button> :\r\n        <button onClick = {() => markCompletion(match.params.id, false)}>{\"Mark as Complete\"}</button>\r\n\r\n    return (<div className = \"NewItemBody\">\r\n                <form onSubmit = { (event) => isNewItem()? onFormSubmit(event, titleState, bodyState, currentTag.toString(), match) : \r\n                    onFormEdit(event, match.params.id, titleState, bodyState, currentTag.toString(), match) }>\r\n\r\n            <h1> {isNewItem()? 'Create new item!': \"Edit item!\"} </h1>\r\n            <label>\r\n                Title:\r\n                <input\r\n                    value = {titleState}\r\n                    onInput = {(e) => setTitle(e.target.value)}\r\n                    required\r\n                    minLength = '3'\r\n                    maxLength = '27'\r\n                    placeholder = \"Item Title, e.g Go surfing at 6pm\" />\r\n            </label>\r\n            <label>\r\n                Body:\r\n                <textarea\r\n                    value = {bodyState}\r\n                    onInput = {(e) => setBody(e.target.value)}\r\n                    required\r\n                    minLength = '5'\r\n                    maxLength = '300'\r\n                    placeholder = \"Item Body, e.g Remember to book tickets to Hawaii\" />\r\n            </label>\r\n            <Dropdown\r\n                    options={tagState}\r\n                    placeholder=\"Tags!\"\r\n                    multiple\r\n                    search\r\n                    selection\r\n                    fluid\r\n                    allowAdditions\r\n                    value={currentTag}\r\n                    onAddItem={(event, {value}) => { setTags(prevState => [{text: value, value}, ...prevState])}}\r\n                    onChange={(event, {value}) => { setCurrentTag(value)}}\r\n            />\r\n            {submitEditButton}  \r\n            {deleteButton}\r\n            {completeIncompleteButton}\r\n        </form>\r\n    </div>)\r\n}\r\n\r\nexport default NewItem","/app/src/components/HomePage.js",[],"/app/src/redux/database.js",[],"/app/src/redux/NavigationBar.js",[],"/app/src/redux/tagFilter.js",[],"/app/src/components/ToDoList.js",["66"],"import React, {useEffect} from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { XMasonry, XBlock } from \"react-xmasonry\"\r\n\r\nimport ToDoItem from \"./ToDoItem\"\r\nimport {getDatabase} from \"../api/API_CRUD\"\r\nimport './CSS/ToDoList.css'\r\n\r\nconst ToDoList = ({match}) => {\r\n    const activated = useSelector(state => state.navigationState)\r\n    const currentDatabase = useSelector(state => state.databaseState)\r\n\r\n    useEffect( () => {\r\n        getDatabase(match.path !== \"/incomplete\")\r\n    } ,[activated] )\r\n    \r\n    // This has very high complexity, may bottleneck here.\r\n    const renderDatabase = currentDatabase.sort( (a,b) => new Date(b.updated_at) - new Date(a.updated_at)).map( \r\n        jsonObject => {\r\n            // Pathname prop\r\n            const pathName = jsonObject.completed ? `/completed/${jsonObject.id}` : `/incomplete/${jsonObject.id}`\r\n            return (    \r\n             <XBlock key = {jsonObject.id} >\r\n               <div className = \"XMasonryCard\">\r\n                        <ToDoItem item = {jsonObject} path = {pathName} />\r\n                </div>\r\n             </XBlock>\r\n        )})\r\n    return (<XMasonry maxColumns = {4}>\r\n            {renderDatabase} \r\n            </XMasonry>)\r\n}\r\n\r\nexport default ToDoList","/app/src/api/API_LINK.js",[],"/app/src/api/API_CRUD.js",["67"],"import React from 'react'\nimport API_LINK from \"./API_LINK\"\nimport axios from \"axios\"\nimport {change_db} from '../redux/database'\nimport {store} from '../redux/combineReducers'\n\n// Get completed or incompleted\nconst getDatabase = async (isCompleted) => {\n    const database = await axios.get(API_LINK + \".json\")\n    store.dispatch(change_db(database.data.data.filter(item => item.completed === isCompleted)))\n}\n \nconst markCompletion = async (id, isCompleted) => { // Put request to mark complete\n    await axios.put(`${API_LINK}/${id}`, {\n        completed: !isCompleted ,\n    }).then(resp => {\n        console.log(resp)\n    }).catch(resp => console.log(resp))\n        getDatabase(isCompleted)\n}\n\nconst redirect = (match) => { // Redirect once CRUD operaton is done. \n    const isNewItem = (match.path === \"/create\")\n    const isCompleted = (match.path === \"/completed/:id\")\n    if (isCompleted) { // Complete will route back to complete\n        window.location.href = \"/completed\"\n    } else { // Create and Incomplete should route back to incomplete \n        console.log(isNewItem, isCompleted, match.path)\n/*         if (isNewItem) {\n            console.log(\"Redirect and change the nav bar\")\n            store.dispatch(navigate(\"Incomplete\"))\n        }\n */        window.location.href = \"/incomplete\"\n    }\n}\n\nconst deleteEntry = async (id) => { // Destroy\n    await axios.delete(`${API_LINK}/${id}`)\n}\n\n// Completed defaulted to be false \nconst onFormSubmit = async (event, title, body, tag_list, match) => {\n    event.preventDefault();\n    await axios.post(API_LINK, {\n        title,\n        body,\n        tag_list\n    }).then(resp => {\n        console.log(resp)\n    }).catch(resp => console.log(resp))\n     redirect(match)\n}\n\nconst onFormEdit = async (event, id, title, body, tag_list, match) => {\n    console.log(\"Edit called\")\n    event.preventDefault();\n    console.log(tag_list)\n    await axios.put(`${API_LINK}/${id}`, {\n        // ES15 syntax\n        title,\n        body,\n        tag_list\n    }).then(resp => {\n        console.log(resp)\n    }).catch(error => {\n        if (error.response) {\n            console.log(\"Data\",error.response.data);\n        } else {\n            console.log(\"Error\",error)\n        }\n    })\n    redirect(match)\n}\n\nexport {getDatabase, markCompletion, deleteEntry, onFormEdit, onFormSubmit}","/app/src/components/ToDoItem.js",[],"/app/src/components/ToDoCard.js",["68","69","70"],"import React from \"react\"\nimport { Card, Label } from 'semantic-ui-react'\nimport {addTag, removeTag, tagReducer} from \"../redux/tagFilter\"\nimport './CSS/ToDoCard.css'\nimport { useSelector } from \"react-redux\";\nconst ToDoCard = ({item}) => {\n\n    const tags = item.tag_list.map( tag => <Label onClick = {() => addTag(tag)} key={tag}>{tag}</Label>)\n\n    return (\n      <>\n      <Card>\n        <Card.Content header = {item.title} style={{whiteSpace: 'pre-wrap', overflowWrap: 'break-word'}} className = \"CardHeader\"/>\n        <Card.Content meta = {`Updated: ${new Date(item.updated_at).toString().substr(4,17) } `} className = \"CardMeta\"/>\n        <Card.Content description ={item.body} style={{whiteSpace: 'pre-wrap', overflowWrap: 'break-word'}} />\n        <Card.Content extra> {tags} </Card.Content>\n    </Card>\n       </>)\n    }\n\n\n    \n\nexport default ToDoCard",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":41,"column":28,"nodeType":"77","endLine":41,"endColumn":40,"suggestions":"78"},{"ruleId":"75","severity":1,"message":"79","line":15,"column":8,"nodeType":"77","endLine":15,"endColumn":19,"suggestions":"80"},{"ruleId":"81","severity":1,"message":"82","line":1,"column":8,"nodeType":"83","messageId":"84","endLine":1,"endColumn":13},{"ruleId":"81","severity":1,"message":"85","line":3,"column":17,"nodeType":"83","messageId":"84","endLine":3,"endColumn":26},{"ruleId":"81","severity":1,"message":"86","line":3,"column":28,"nodeType":"83","messageId":"84","endLine":3,"endColumn":38},{"ruleId":"81","severity":1,"message":"87","line":5,"column":10,"nodeType":"83","messageId":"84","endLine":5,"endColumn":21},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isNewItem' and 'match.params.id'. Either include them or remove the dependency array.","ArrayExpression",["90"],"React Hook useEffect has a missing dependency: 'match.path'. Either include it or remove the dependency array.",["91"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'removeTag' is defined but never used.","'tagReducer' is defined but never used.","'useSelector' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"Update the dependencies array to be: [isNewItem, match.params.id, match.path]",{"range":"96","text":"97"},"Update the dependencies array to be: [activated, match.path]",{"range":"98","text":"99"},[1754,1766],"[isNewItem, match.params.id, match.path]",[502,513],"[activated, match.path]"]