[{"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/index.tsx":"1","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/combineReducers.ts":"2","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/App.tsx":"3","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/database.ts":"4","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/NavigationBar.ts":"5","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/userID.ts":"6","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/sortType.ts":"7","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/filterDueDate.ts":"8","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/userName.ts":"9","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/filterTag.ts":"10","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/HomePage.tsx":"11","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/WelcomePage.tsx":"12","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/NewItem.tsx":"13","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Authentication/AuthenticatedRoutes.tsx":"14","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Authentication/NonAuthenticatedRoutes.tsx":"15","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Authentication/Login.tsx":"16","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Authentication/NotFoundPage.tsx":"17","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/api/API_LINK.ts":"18","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/api/API_CRUD.ts":"19","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/api/API_AUTHEN.ts":"20","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/ToDoList.tsx":"21","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/FilterBar.tsx":"22","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/WelcomePageWord.tsx":"23","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/LoadSpinner.tsx":"24","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/NavigationBar.tsx":"25","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/ToDoCard.tsx":"26","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/ToDoCardContent.tsx":"27"},{"size":336,"mtime":1610954427741,"results":"28","hashOfConfig":"29"},{"size":811,"mtime":1610919659460,"results":"30","hashOfConfig":"29"},{"size":1517,"mtime":1610889312557,"results":"31","hashOfConfig":"29"},{"size":321,"mtime":1610918068420,"results":"32","hashOfConfig":"29"},{"size":559,"mtime":1610918057290,"results":"33","hashOfConfig":"29"},{"size":474,"mtime":1610918050703,"results":"34","hashOfConfig":"29"},{"size":554,"mtime":1610918054161,"results":"35","hashOfConfig":"29"},{"size":510,"mtime":1610960096830,"results":"36","hashOfConfig":"29"},{"size":478,"mtime":1610918043919,"results":"37","hashOfConfig":"29"},{"size":364,"mtime":1610918060599,"results":"38","hashOfConfig":"29"},{"size":397,"mtime":1610892317840,"results":"39","hashOfConfig":"29"},{"size":1805,"mtime":1610916738205,"results":"40","hashOfConfig":"29"},{"size":6961,"mtime":1610961254010,"results":"41","hashOfConfig":"29"},{"size":1135,"mtime":1610949344680,"results":"42","hashOfConfig":"29"},{"size":969,"mtime":1610949056710,"results":"43","hashOfConfig":"29"},{"size":3270,"mtime":1610961312320,"results":"44","hashOfConfig":"29"},{"size":724,"mtime":1610961329350,"results":"45","hashOfConfig":"29"},{"size":520,"mtime":1610888831804,"results":"46","hashOfConfig":"29"},{"size":2613,"mtime":1610961168450,"results":"47","hashOfConfig":"29"},{"size":2748,"mtime":1610888765986,"results":"48","hashOfConfig":"29"},{"size":3553,"mtime":1610939087330,"results":"49","hashOfConfig":"29"},{"size":4163,"mtime":1610961349880,"results":"50","hashOfConfig":"29"},{"size":527,"mtime":1610916784037,"results":"51","hashOfConfig":"29"},{"size":332,"mtime":1610889628330,"results":"52","hashOfConfig":"29"},{"size":2316,"mtime":1610954782460,"results":"53","hashOfConfig":"29"},{"size":1661,"mtime":1610892803870,"results":"54","hashOfConfig":"29"},{"size":1481,"mtime":1610939146970,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1b0xvje",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/index.tsx",[],["113","114"],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/combineReducers.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/App.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/database.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/NavigationBar.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/userID.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/sortType.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/filterDueDate.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/userName.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/redux/filterTag.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/HomePage.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/WelcomePage.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/NewItem.tsx",["115"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Dropdown } from \"semantic-ui-react\";\r\nimport axios from \"axios\";\r\nimport { API_LINK_ITEMS_POSTFIX } from \"../api/API_LINK\";\r\nimport \"./CSS/NewItem.css\";\r\nimport { markCompletion, deleteEntry, onFormEdit, onFormSubmit } from \"../api/API_CRUD\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport Datetime from \"react-datetime\";\r\nimport moment from \"moment\";\r\nimport LoadSpinner from \"./LoadSpinner\";\r\nimport { RootState } from \"../redux/combineReducers\";\r\n\r\ninterface tagOptionsObjectInterface {\r\n  key: string;\r\n  text: string;\r\n  value: string;\r\n}\r\n\r\ninterface itemObject {\r\n  title: string;\r\n  body: string;\r\n  user_id: number;\r\n  due_date: string;\r\n  tag_list: string; // Ruby can only take the string.\r\n}\r\n\r\nconst NewItem = ({ match }) => {\r\n  // Title and body can be converted 1 state, but flattened so as to prevent double re-rendering.\r\n  const [titleState, setTitle] = useState<string>(\"\");\r\n  const [bodyState, setBody] = useState<string>(\"\");\r\n  const userID = useSelector((state: RootState) => state.IDState);\r\n\r\n  // The tagInputBar requires 2 states to work.\r\n  const [tagState, setTags] = useState<tagOptionsObjectInterface[]>([]);\r\n  const [currentTag, setCurrentTag] = useState<string[]>([]);\r\n\r\n  // Spinner state\r\n  const loadingtext = \"Fetching your information..\";\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  // Determines the rendering of the page\r\n  const history = useHistory();\r\n  const isNewItem = useCallback(() => match.path === \"/create\", [match]);\r\n  const isCompleted = useCallback(() => match.path === \"/completed/:id\", [match]);\r\n\r\n  // Calendar-related var\r\n  var inputProps = { placeholder: \"Due date\" };\r\n  const [calendarDate, setCalendarDate] = useState<string>(\"\"); // \"\" when empty, Date type otherwise\r\n  var yesterday = moment().subtract(1, \"day\"); // This function and below is all given by react-datetime.\r\n  var valid = function (current) {\r\n    return current.isAfter(yesterday);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fills up the form for put request.\r\n    const refreshArticle = async () => {\r\n      if (!isNewItem()) {\r\n        const itemDetails = await axios.get(`${API_LINK_ITEMS_POSTFIX}/${match.params.id}`);\r\n        setTitle(itemDetails.data.data.title);\r\n        setBody(itemDetails.data.data.body);\r\n        // Parse the tags, and set them to the tagState\r\n        setTags(\r\n          itemDetails.data.data.tag_list.map((tag: string) => {\r\n            const newObj: tagOptionsObjectInterface = { key: tag, text: tag, value: tag };\r\n            return newObj;\r\n          })\r\n        );\r\n        if (itemDetails.data.data.due_date) {\r\n          // If there is a due date specified\r\n          console.log(itemDetails.data.data.due_date);\r\n          // setCalendarDate(new Date(itemDetails.data.data.due_date));\r\n\r\n          setCalendarDate(itemDetails.data.data.due_date);\r\n        } else {\r\n          // No due date specified, just leave the date to default \"\", which would become null below via ternary.\r\n        }\r\n        setCurrentTag(itemDetails.data.data.tag_list);\r\n        setLoading(false);\r\n      } else {\r\n        // Resets state, if user changes from edit to create via navBar.\r\n        setTitle(\"\");\r\n        setBody(\"\");\r\n        setTags([]);\r\n        setCalendarDate(\"\");\r\n        //setCalendarDate(\"\");\r\n      }\r\n    };\r\n    refreshArticle();\r\n  }, [match.path]);\r\n\r\n  // Conditional rendering of the buttons\r\n  const submitEditButton = <button type=\"submit\">{isNewItem() ? \"Submit\" : \"Edit\"}</button>;\r\n\r\n  const deleteButton = isNewItem() ? <></> : <button onClick={() => deleteEntry(match.params.id)}> {\"Delete\"} </button>;\r\n\r\n  const completeIncompleteButton = isNewItem() ? ( // Double ternary\r\n    <></>\r\n  ) : isCompleted() ? (\r\n    <button onClick={() => markCompletion(match.params.id, true)}>{\"Mark as Incomplete\"}</button>\r\n  ) : (\r\n    <button onClick={() => markCompletion(match.params.id, false)}>{\"Mark as Complete\"}</button>\r\n  );\r\n\r\n  // If is a new item, render immediately\r\n  // If is an existing item, must wait to load, then return.\r\n  return !isNewItem() && loading ? (\r\n    <LoadSpinner text={loadingtext} />\r\n  ) : (\r\n    <div className=\"NewItemBody\">\r\n      <form\r\n        className=\"NewItemform\"\r\n        onSubmit={(event) => {\r\n          const item: itemObject = {\r\n            user_id: userID,\r\n            title: titleState,\r\n            body: bodyState,\r\n            tag_list: currentTag.toString(),\r\n            due_date: calendarDate,\r\n          };\r\n          isNewItem()\r\n            ? onFormSubmit(event, item, match, history)\r\n            : onFormEdit(event, match.params.id, item, match, history);\r\n        }}\r\n      >\r\n        <h1> {isNewItem() ? \"Create new item!\" : \"Edit item!\"} </h1>\r\n        <label>\r\n          Title:\r\n          <input\r\n            value={titleState}\r\n            onInput={(e) => setTitle((e.target as HTMLInputElement).value)}\r\n            required\r\n            minLength={3}\r\n            maxLength={27}\r\n            placeholder=\"Item Title, e.g Go fishing at 6pm\"\r\n          />\r\n        </label>\r\n        <label>\r\n          Body:\r\n          <textarea\r\n            value={bodyState}\r\n            onInput={(e) => setBody((e.target as HTMLInputElement).value)}\r\n            required\r\n            minLength={5}\r\n            maxLength={300}\r\n            placeholder=\"Item Body, e.g Remember to book tickets to Hawaii\"\r\n          />\r\n        </label>\r\n        <Datetime\r\n          dateFormat=\"YYYY-MM-DD\"\r\n          timeFormat={false}\r\n          onChange={(event: any) => {\r\n            // Force cast\r\n            setCalendarDate(event._d);\r\n          }}\r\n          closeOnSelect\r\n          isValidDate={valid}\r\n          inputProps={inputProps}\r\n          // If the calendarDate or isNewItem is empty, then it should be displayed as null\r\n          // apparently calendarDate by itself as \"\" does not evaluate to \"\" here.\r\n          value={isNewItem() || calendarDate === \"\" ? undefined : new Date(calendarDate)} // Is undefined because Datetime.d.ts said so.\r\n        />\r\n        <Dropdown\r\n          options={tagState}\r\n          placeholder=\"Tags!\"\r\n          multiple\r\n          search\r\n          selection\r\n          fluid\r\n          allowAdditions\r\n          value={currentTag}\r\n          onAddItem={(event, { value }) => {\r\n            setTags((prevState): tagOptionsObjectInterface[] => [\r\n              { text: value as string, value: value as string, key: value as string }, // Force cast\r\n              ...prevState,\r\n            ]);\r\n          }}\r\n          onChange={(event, { value }) => {\r\n            setCurrentTag(value as string[]); // Force cast\r\n          }}\r\n        />\r\n        {submitEditButton}\r\n        {deleteButton}\r\n        {completeIncompleteButton}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewItem;\r\n","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Authentication/AuthenticatedRoutes.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Authentication/NonAuthenticatedRoutes.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Authentication/Login.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/Authentication/NotFoundPage.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/api/API_LINK.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/api/API_CRUD.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/api/API_AUTHEN.ts",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/ToDoList.tsx",["116","117"],"import React, { useState, useCallback, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { XMasonry, XBlock } from \"react-xmasonry\";\r\nimport ToDoItem from \"./ToDoCard\";\r\nimport { getDatabase } from \"../api/API_CRUD\";\r\nimport \"./CSS/ToDoList.css\";\r\nimport LoadSpinner from \"./LoadSpinner\";\r\nimport { change_db } from \"../redux/database\";\r\nimport { RootState, store } from \"../redux/combineReducers\";\r\n\r\nconst ToDoList = ({ match }) => {\r\n  const activated = useSelector((state: RootState) => state.navigationState);\r\n  const currentDatabase = useSelector((state: RootState) => state.databaseState);\r\n  const currentTag = useSelector((state: RootState) => state.tagState);\r\n  const isSortingByUpdateDate = useSelector((state: RootState) => state.sortState);\r\n  const filterDueDateDaysBy = useSelector((state: RootState) => state.dueDateState);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    store.dispatch(change_db([]));\r\n    setLoading(true);\r\n    const databaseFn = async () => {\r\n      await getDatabase(match.path !== \"/incomplete\");\r\n      setLoading(false);\r\n    };\r\n    databaseFn();\r\n  }, [activated]);\r\n\r\n  const filterBasedOnTag = (jsonObject) => {\r\n    // If currentTag is not empty, then we will filter based on currentTag\r\n    if (currentTag.length > 0) {\r\n      if (jsonObject.tag_list.filter((e) => currentTag.indexOf(e) !== -1).length > 0) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      // If currentTag is empty, then no filter is applied\r\n      return true;\r\n    }\r\n  };\r\n  const _MS_PER_DAY = 1000 * 60 * 60 * 24;\r\n  const filterBasedOnDueDate = (jsonObject) => {\r\n    if (!filterDueDateDaysBy) {\r\n      return true;\r\n    } else {\r\n      if (jsonObject.due_date) {\r\n        const todayOffsetByFilter: Date = new Date();\r\n        todayOffsetByFilter.setDate(todayOffsetByFilter.getDate() + filterDueDateDaysBy); // Add days to date\r\n        const dateObj: Date = new Date(jsonObject.due_date);\r\n        return (todayOffsetByFilter.getTime() - dateObj.getTime()) / _MS_PER_DAY >= 0;\r\n      }\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Comparators\r\n  const sortBasedOnUpdate = (a, b) => {\r\n    return new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime();\r\n  };\r\n  const sortBasedOnDueDate = (a, b) => {\r\n    if (a.due_date === b.due_date) {\r\n      return 0;\r\n    } else if (a.due_date === null) {\r\n      return 1;\r\n    } else if (b.due_date === null) {\r\n      return -1;\r\n    } else {\r\n      return new Date(a.due_date).getTime() - new Date(b.due_date).getTime();\r\n    }\r\n  };\r\n  // This has very high complexity, may bottleneck here.\r\n  const renderDatabase = currentDatabase\r\n    .filter((x) => filterBasedOnTag(x))\r\n    .filter((x) => filterBasedOnDueDate(x))\r\n    .sort((a, b) => (isSortingByUpdateDate ? sortBasedOnUpdate(a, b) : sortBasedOnDueDate(a, b)))\r\n    .map((jsonObject) => {\r\n      return (\r\n        <XBlock key={jsonObject.id}>\r\n          <div className=\"XMasonryCard\">\r\n            <ToDoItem item={jsonObject} />\r\n          </div>\r\n        </XBlock>\r\n      );\r\n    });\r\n\r\n  // If renderDatabase is loading, we'll need buffer some things first right\r\n  const displayDatabase = useCallback(() => {\r\n    return (\r\n      //\r\n      //<XMasonry style={{ marginTop: \"5vh\" }} maxColumns={4}>\r\n      <XMasonry maxColumns={4}>{renderDatabase}</XMasonry>\r\n    );\r\n  }, [currentTag, renderDatabase]);\r\n\r\n  return loading ? <LoadSpinner text=\"Loading data..\" /> : displayDatabase();\r\n};\r\n\r\nexport default ToDoList;\r\n","/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/FilterBar.tsx",["118","119"],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/WelcomePageWord.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/LoadSpinner.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/NavigationBar.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/ToDoCard.tsx",[],"/home/fergusmok/CVWO/clone2/ToDoApp/appfrontend/src/components/ToDoCardContent.tsx",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":91,"column":6,"nodeType":"126","endLine":91,"endColumn":18,"suggestions":"127"},{"ruleId":"124","severity":1,"message":"128","line":27,"column":6,"nodeType":"126","endLine":27,"endColumn":17,"suggestions":"129"},{"ruleId":"124","severity":1,"message":"130","line":94,"column":6,"nodeType":"126","endLine":94,"endColumn":34,"suggestions":"131"},{"ruleId":"124","severity":1,"message":"132","line":62,"column":6,"nodeType":"126","endLine":62,"endColumn":23,"suggestions":"133"},{"ruleId":"124","severity":1,"message":"134","line":70,"column":6,"nodeType":"126","endLine":70,"endColumn":13,"suggestions":"135"},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isNewItem' and 'match.params.id'. Either include them or remove the dependency array.","ArrayExpression",["138"],"React Hook useEffect has a missing dependency: 'match.path'. Either include it or remove the dependency array.",["139"],"React Hook useCallback has an unnecessary dependency: 'currentTag'. Either exclude it or remove the dependency array.",["140"],"React Hook useEffect has a missing dependency: 'isCompleted'. Either include it or remove the dependency array.",["141"],"React Hook useEffect has missing dependencies: 'dispatch' and 'sortOptions'. Either include them or remove the dependency array.",["142"],"no-global-assign","no-unsafe-negation",{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},"Update the dependencies array to be: [isNewItem, match.params.id, match.path]",{"range":"153","text":"154"},"Update the dependencies array to be: [activated, match.path]",{"range":"155","text":"156"},"Update the dependencies array to be: [renderDatabase]",{"range":"157","text":"158"},"Update the dependencies array to be: [currentDatabase, isCompleted]",{"range":"159","text":"160"},"Update the dependencies array to be: [dispatch, match, sortOptions]",{"range":"161","text":"162"},[3510,3522],"[isNewItem, match.params.id, match.path]",[1154,1165],"[activated, match.path]",[3408,3436],"[renderDatabase]",[2389,2406],"[currentDatabase, isCompleted]",[2685,2692],"[dispatch, match, sortOptions]"]